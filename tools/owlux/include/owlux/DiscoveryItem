#pragma once

#include <owlux/YeelightStatus>
#include <cc/Organizer>

namespace cc::owlux {

/** \brief Display status of a Yeelight light
  */
class DiscoveryItem final: public Organizer
{
public:
    /** Create a null discovery item
      */
    DiscoveryItem() = default;

    /** Create a new discovery item
      */
    explicit DiscoveryItem(const YeelightStatus &status);

    /** Get a weak reference in \a self
      */
    DiscoveryItem &associate(Out<DiscoveryItem> self);

    /** Get access to the light's status
      */
    YeelightStatus status() const;

    /** Set a new light status
      */
    DiscoveryItem &status(const YeelightStatus &status);

    DiscoveryItem &onSettingsRequested(Fun<void()> &&f);

    /** Setup function \a f to be called if this item has been expired
      */
    DiscoveryItem &onExpired(Fun<void()> &&f);

    /** Update status and restart expiry timer
      */
    void update(const YeelightStatus &status);

private:
    struct State;

    State &me();
    const State &me() const;
};

} // namespace cc::owlux
