#pragma once

#include <yee/YeelightTransition>

namespace cc::yee {

class YeelightColorTempTransition final: public YeelightTransition
{
public:
    YeelightColorTempTransition(int duration, int targetColorTemp, int targetBrightness = -1):
        YeelightTransition{new State{duration, targetColorTemp, targetBrightness}}
    {}

    int targetColorTemp() const { return me().targetColorTemp_; }
    int targetBrightness() const { return me().targetBrightness_; }

private:
    struct State: public YeelightTransition::State
    {
        State(int duration, int targetColorTemp, int targetBrightness):
            YeelightTransition::State{Type::ColorTempChange, duration},
            targetColorTemp_{targetColorTemp},
            targetBrightness_{targetBrightness}
        {}

        Tuple toTuple() const
        {
            return {
                duration(),
                static_cast<int>(type()),
                targetColorTemp_,
                targetBrightness_
            };
        }

        int targetColorTemp_;
        int targetBrightness_;
    };

    const State &me() const { return Object::me.as<State>(); }
};

} // namespace cc::yee
