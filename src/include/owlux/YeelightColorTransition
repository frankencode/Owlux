/*
 * Copyright (C) 2022 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see Owlux/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <owlux/YeelightTransition>
#include <cc/Color>

namespace cc::owlux {

class YeelightColorTransition final: public YeelightTransition
{
public:
    YeelightColorTransition(int duration, Color targetColor, int targetBrightness = -1):
        YeelightTransition{new State{duration, targetColor, targetBrightness}}
    {}

    Color targetColor() const { return me().targetColor_; }
    int targetBrightness() const { return me().targetBrightness_; }

private:
    struct State: public YeelightTransition::State
    {
        State(int duration, Color targetColor, int targetBrightness):
            YeelightTransition::State{Type::ColorChange, duration},
            targetColor_{targetColor},
            targetBrightness_{targetBrightness}
        {}

        Tuple toTuple() const override
        {
            return {
                duration(),
                static_cast<int>(type()),
                static_cast<int>(targetColor_.value() & 0xFFFFFF),
                targetBrightness_
            };
        }

        Color targetColor_;
        int targetBrightness_;
    };

    const State &me() const { return Object::me.as<State>(); }
};

} // namespace cc::owlux
