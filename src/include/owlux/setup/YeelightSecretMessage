#pragma once

#include <owlux/YeelightProtocolError>
#include <cc/Object>

namespace cc::owlux {

class YeelightSecretMessage: public Object
{
public:
    YeelightSecretMessage() = default;

    explicit YeelightSecretMessage(const Bytes &message);

    uint16_t magic() const { return me().magic_; }
    uint16_t length() const { return me().length_; }
    uint64_t deviceId() const { return me().deviceId_; }
    uint32_t uptime() const { return me().uptime_; }
    Bytes checksum() const { return me().checksum_; }
    Bytes payload() const { return me().payload_; }
    Bytes message() const { return me().message_; }

    Bytes computeChecksum(const Bytes &token) const { return me().computeChecksum(token); }
    String decipherPayload(const Bytes &token) const { return me().deciperPayload(token); }

protected:
    struct State: public Object::State
    {
        State() = default;

        explicit State(const Bytes &message);

        Bytes computeChecksum(const Bytes &token) const;
        String deciperPayload(const Bytes &token) const;

        uint16_t magic_ { 0 };
        uint16_t length_ { 0 };
        uint64_t deviceId_ { 0 };
        uint32_t uptime_ { 0 };

        Bytes checksum_;
        Bytes payload_;
        Bytes message_;
    };

    explicit YeelightSecretMessage(State *newState);

    const State &me() const { return Object::me.as<State>(); }
};

} // namespace cc::owlux
