/*
 * Copyright (C) 2022 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see Owlux/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/Variant>
#include <cc/Object>

namespace cc::owlux {

class YeelightCommand: public Object
{
public:
    YeelightCommand() = default;

    int id() const { return me().id_; }
    void setId(int newValue) { me().id_ = newValue; }

    String method() const { return me().method_; }

    String toString() const { return me().toString(); }

protected:
    friend class YeelightControl;

    struct State: public Object::State
    {
        State(const String &method):
            method_{method}
        {}

        virtual String toString() const = 0;

        int id_ { -1 };
        String method_;
    };

    YeelightCommand(State *newState):
        Object{newState}
    {}

    State *operator->() { return &me(); }

    State &me() { return Object::me.as<State>(); }
    const State &me() const { return Object::me.as<State>(); }
};

} // namespace cc::owlux
