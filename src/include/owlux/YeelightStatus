#pragma once

#include <owlux/YeelightColorMode>
#include <cc/SocketAddress>
#include <cc/Version>
#include <cc/Color>
#include <cc/Set>

namespace cc::owlux {

class YeelightUpdate;

class YeelightStatus final: public Object
{
public:
    YeelightStatus() = default;

    YeelightStatus(const SocketAddress &address, const String &message);

    SocketAddress address() const;
    long refreshInterval() const;

    long id() const;
    String name() const;
    void setName(const String &newValue);

    String displayName() const;

    String model() const;
    const Set<String> &supportedMethods() const;
    Version firmwareVersion() const;

    bool power() const;
    void setPower(bool on);

    int brightness() const;

    YeelightColorMode colorMode() const;

    int colorTemp() const;
    Color color() const;

    int hue() const;
    int sat() const;
    void setSat(int newValue);

    String operator()(const String &key) const;

    bool sleepTimer() const;
    void setSleepTimer(bool on);

    int sleepHour() const;
    int sleepMinutes() const;
    void setSleepTime(int hour, int minutes);

    String toString() const;

    void update(const YeelightUpdate &update);
    void update(const YeelightStatus &update);

private:
    struct State;

    State &me();
    const State &me() const;
};

} // namespace cc::owlux
